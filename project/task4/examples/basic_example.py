"""
–ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã –∏–≥—Ä—ã Blackjack.
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã –≤ –∫–∞–∂–¥–æ–º —Ä–∞—É–Ω–¥–µ.
"""
import os
import sys

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from core.game import Game
from strategies.conservative import ConservativeStrategy
from strategies.aggressive import AggressiveStrategy
from strategies.basic import BasicStrategy


def run_basic_example():
    """–ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º –∫–∞–∂–¥–æ–≥–æ —Ä–∞—É–Ω–¥–∞"""
    print("=" * 80)
    print("–ë–ê–ó–û–í–´–ô –ü–†–ò–ú–ï–† BLACKJACK - –ò–ó–ú–ï–ù–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–Ø –ü–û –†–ê–£–ù–î–ê–ú")
    print("=" * 80)

    # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É —Å –º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ä–∞—É–Ω–¥–æ–≤ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
    game = Game(num_decks=2, max_rounds=3)

    # –î–æ–±–∞–≤–ª—è–µ–º –±–æ—Ç–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
    game.add_bot("–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–æ—Ä", ConservativeStrategy(), 500)
    game.add_bot("–ê–≥—Ä–µ—Å—Å–æ—Ä", AggressiveStrategy(), 500)
    game.add_bot("–¢–∞–∫—Ç–∏–∫", BasicStrategy(), 500)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
    game.start_game()

    # –ò–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
    for round_num in range(game.max_rounds):
        if not game.is_game_active:
            break

        print(f"\n{'='*80}")
        print(f"–†–ê–£–ù–î {round_num + 1} - –ù–ê–ß–ê–õ–û")
        print(f"{'='*80}")

        # –ò–≥—Ä–∞–µ–º —Ä–∞—É–Ω–¥
        game.play_round()

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —Ä–∞—É–Ω–¥–∞
        game_state = game.get_game_state()

        # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        print(f"\nüìä –°–û–°–¢–û–Ø–ù–ò–ï –ü–û–°–õ–ï –†–ê–£–ù–î–ê {round_num + 1}:")
        print(f"   –ù–æ–º–µ—Ä —Ä–∞—É–Ω–¥–∞: {game_state['round']}")
        print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: {game_state['active_players']}")
        print(f"   –ö–∞—Ä—Ç –≤ –∫–æ–ª–æ–¥–µ: {game_state['deck_cards']}")

        print(f"\nüé© –î–ò–õ–ï–†:")
        print(f"   –ö–∞—Ä—Ç—ã: {game_state['dealer']['hand']}")
        print(f"   –°—É–º–º–∞ –æ—á–∫–æ–≤: {game_state['dealer']['hand_value']}")
        print(f"   –ü–µ—Ä–µ–±–æ—Ä: {'–î–∞' if game_state['dealer']['busted'] else '–ù–µ—Ç'}")

        print(f"\nüë• –ò–ì–†–û–ö–ò:")
        for player in game_state["players"]:
            print(f"   {player['name']} ({player['type']}):")
            print(
                f"     –§–∏—à–∫–∏: {player['chips']} ({'+' if player['chips'] > 500 else '-'}{player['chips'] - 500})"
            )
            print(f"     –ö–∞—Ä—Ç—ã: {player['hand']}")
            print(f"     –°—É–º–º–∞ –æ—á–∫–æ–≤: {player['hand_value']}")
            print(f"     –ü–µ—Ä–µ–±–æ—Ä: {'–î–∞' if player['busted'] else '–ù–µ—Ç'}")
            print(f"     –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {player['bet']}")

        print(f"\nüìà –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ü–û –°–†–ê–í–ù–ï–ù–ò–Æ –° –ù–ê–ß–ê–õ–û–ú –†–ê–£–ù–î–ê:")
        if round_num == 0:
            print("   –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
        else:
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
            prev_state = game.round_history[round_num - 1]["final_state"]
            for current_player in game_state["players"]:
                prev_player = next(
                    (
                        p
                        for p in prev_state["players"]
                        if p["name"] == current_player["name"]
                    ),
                    None,
                )
                if prev_player:
                    change = current_player["chips"] - prev_player["chips"]
                    if change != 0:
                        print(f"   {current_player['name']}: {change:+} —Ñ–∏—à–µ–∫")

    # –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    print(f"\n{'='*80}")
    print("–§–ò–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ò–ì–†–´")
    print(f"{'='*80}")

    final_state = game.get_game_state()

    print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –°—ã–≥—Ä–∞–Ω–æ —Ä–∞—É–Ω–¥–æ–≤: {final_state['round']}")
    print(f"   –û—Å—Ç–∞–ª–æ—Å—å –∫–∞—Ä—Ç –≤ –∫–æ–ª–æ–¥–µ: {final_state['deck_cards']}")
    print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: {final_state['active_players']}")

    print(f"\nüèÜ –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    sorted_players = sorted(
        final_state["players"], key=lambda x: x["chips"], reverse=True
    )
    for i, player in enumerate(sorted_players, 1):
        profit = player["chips"] - 500  # –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –±—ã–ª 500
        profit_percent = (profit / 500) * 100
        medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
        print(
            f"   {medal} {player['name']}: {player['chips']} —Ñ–∏—à–µ–∫ ({profit:+} —Ñ–∏—à–µ–∫, {profit_percent:+.1f}%)"
        )

    print(f"\nüìà –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨ –°–¢–†–ê–¢–ï–ì–ò–ô:")
    for player in sorted_players:
        if "–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–æ—Ä" in player["name"]:
            print("   –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: –ú–µ–Ω—å—à–∏–π —Ä–∏—Å–∫, —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        elif "–ê–≥—Ä–µ—Å—Å–æ—Ä" in player["name"]:
            print(
                "   –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫, –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –±–æ–ª—å—à–∏—Ö –≤—ã–∏–≥—Ä—ã—à–µ–π/–ø–æ—Ç–µ—Ä—å"
            )
        elif "–¢–∞–∫—Ç–∏–∫" in player["name"]:
            print(
                "   –¢–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: –ë–∞–ª–∞–Ω—Å —Ä–∏—Å–∫–∞ –∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ—Å—Ç–∏"
            )


if __name__ == "__main__":
    run_basic_example()
