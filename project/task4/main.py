from core.game import Game
from strategies.conservative import ConservativeStrategy
from strategies.aggressive import AggressiveStrategy
from strategies.basic import BasicStrategy


def main():
    print("‚ô†‚ô£‚ô•‚ô¶ –î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í BLACKJACK! ‚ô†‚ô£‚ô•‚ô¶")

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã
    game = Game(num_decks=6, max_rounds=20)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    player_name = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è: ").strip() or "–ò–≥—Ä–æ–∫"
    game.add_human_player(player_name, 1000)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
    game.add_bot("–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ë–æ—Ç", ConservativeStrategy(), 1000)
    game.add_bot("–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ë–æ—Ç", AggressiveStrategy(), 1000)
    game.add_bot("–¢–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ë–æ—Ç", BasicStrategy(), 1000)

    # –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
    game.start_game()

    # –ò–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
    while game.is_game_active:
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—É–Ω–¥–∞...")
        game.play_round()

        # –í—ã–≤–æ–¥ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state = game.get_game_state()
        print(f"\nüìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
        print(f"–†–∞—É–Ω–¥: {state['round']}/{state['max_rounds']}")
        print(f"–ö–∞—Ä—Ç –≤ –∫–æ–ª–æ–¥–µ: {state['deck_cards']}")

        print(f"\nüí∞ –§–∏—à–∫–∏ –∏–≥—Ä–æ–∫–æ–≤:")
        for player in state["players"]:
            status = "üíÄ –ë–ê–ù–ö–†–û–¢" if player["chips"] == 0 else f"üèÜ {player['chips']}"
            print(f"  {player['name']} ({player['type']}): {status}")

        print("=" * 60)

        # –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫–∞–∑ –æ—Ç—á–µ—Ç–∞
        if game.current_round > 0:
            show_report = (
                input(f"\nüìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—á–µ—Ç –ø–æ –†–ê–£–ù–î {game.current_round}? (y/n): ")
                .lower()
                .strip()
            )
            if show_report == "y":
                game.show_round_report(game.current_round)

    # –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\nüé∞ –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ üé∞")
    final_state = game.get_game_state()

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ñ–∏—à–µ–∫
    sorted_players = sorted(
        final_state["players"], key=lambda x: x["chips"], reverse=True
    )

    for i, player in enumerate(sorted_players, 1):
        medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
        print(f"{medal} {player['name']}: {player['chips']} —Ñ–∏—à–µ–∫")

    if sorted_players and sorted_players[0]["chips"] > 0:
        print(
            f"\nüèÜ –ü–û–ë–ï–î–ò–¢–ï–õ–¨: {sorted_players[0]['name']} —Å {sorted_players[0]['chips']} —Ñ–∏—à–∫–∞–º–∏!"
        )
    else:
        print(f"\nüíÄ –í—Å–µ –∏–≥—Ä–æ–∫–∏ –æ–±–∞–Ω–∫—Ä–æ—Ç–∏–ª–∏—Å—å! –ü–æ–±–µ–¥–∏—Ç–µ–ª—è –Ω–µ—Ç.")


if __name__ == "__main__":
    main()
